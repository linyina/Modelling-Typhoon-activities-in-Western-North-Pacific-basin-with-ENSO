{
    "collab_server" : "",
    "contents" : "#######################################################################\n#######################################################################\n#######################################################################\n######                                                           ######\n######      Analysis of Galapagos endemics data using GLMs       ######\n######                                                           ######\n######  In this script we'll see how to use the glm() command    ######\n######  to fit a GLM and interpret the output. We'll also use    ######\n######  the fitted model to do some predictions, and see how     ######\n######              to compare nested GLMs in R.                 ######\n######                                                           ######\n######  The exercise looks at the factors affecting the numbers  ######\n######  of endemic species on the Galapagos islands. The data    ######\n######  are in file galapagos.dat, which you used in Workshop 1. ######\n######  A species is endemic to an island if is found on that    ######\n######  island and nowhere else: the numbers of endemics are     ######\n######  therefore typically much lower than the total numbers of ######\n######  species that you looked at in Workshop 1.                ######\n######                                                           ######\n#######################################################################\n#######################################################################\n#######################################################################\n#\n#   Read the data\n#\ngalapagos.data <- read.table(\"galapagos.dat\")\n#\n#   Open a graphics window if necessary, with space for two plots\n#   side by side. The \"oma\" argument sets the \"outer margin\" sizes:\n#   the reason for this is to illustrate how to specify an overall\n#   title for an array of plots. Wait for it!\n#\nif (dev.cur()==1) x11(width=10,height=4)\npar(mfrow=c(1,2),lwd=2,mar=c(3,3,2,2),oma=c(0,0,2,0),mgp=c(2,0.75,0))\n#\n#   Now, plot the numbers of endemics against the island areas - \n#   on both untransformed and log scales.\n#\nplot(galapagos.data$Area,galapagos.data$Endemics,col=\"blue\",\n     pch=15,xlab=expression(\"Island area (km\"^2*\")\"),ylab=\"# endemics\",\n     main=\"Original scales\")\nplot(galapagos.data$Area,galapagos.data$Endemics,col=\"blue\",\n     pch=15,log=\"xy\",xlab=expression(\"Island area (km\"^2*\")\"),ylab=\"# endemics\",\n     main=\"Logarithmic scales\")\n#\n#   And here's the overall title\n#\nmtext(text=\"Galapagos islands: numbers of endemic species\",\n      side=3,outer=TRUE,cex=2)\n#\n#   Did you notice the warning message when you did the logarithmic \n#   plot? What caused this? Notice that it highlights a problem with \n#   the \"easy\" way to deal with nonlinearity in the original \n#   relationship: transforming the data is all very well, but if \n#   you lose some observations in the process then perhaps it's\n#   time to consider an alternative approach! \n#\n#   This is where GLMs come in. Given that the variable \"number \n#   of endemic species\" is a count, if we want to relate the number \n#   of species to the island area then it's natural to consider models \n#   based on the Poisson distribution. It is also natural to consider \n#   a log link function, so that we represent the log of the expected \n#   number of endemics as a linear function of log(Area) (this seems\n#   sensible according to the second plot that you've just produced -\n#   remember the aims of an exploratory analysis, from Workshop 1).\n#   ***NOTE*** that in a GLM we transform the underlying (population) \n#   means of the response variables and ***NOT*** the responses \n#   themselves: this avoids the problem that you encountered\n#   in the plot just now. \n#\n#   The next command fits the GLM. Most of it looks just like\n#   an lm() call: the only difference is the \"family\" argument,\n#   which specifies the distribution and the link function. \n#\ngalapagos.glm1 <- glm(Endemics ~ log(Area), \n                      family=poisson(link=\"log\"),\n                      data=galapagos.data)\n#\n#   Next, obtain a summary. \n#\nsummary(galapagos.glm1)\n#   \n#   Again, this looks almost exactly like what you'd get for a linear\n#   model object. To interpret it, you need to understand what the\n#   fitted model looks like. So: in this case, the model says that Y[i]\n#   (number of endemics for the ith island) comes from a Poisson\n#   distribution with mean mu[i], where\n#   \n#   log(mu[i]) = beta0 + (beta1 * x[i])\n#\n#   and x[i] is the log of the area of the ith island. The coefficients\n#   in the output are estimates of beta0 and beta1 respectively.\n#\n#   Notice also the \"Null deviance\" (this is the deviance - or lack of\n#   fit - for a model containing just a constant term, analogous to the\n#   total sum of squares in a linear regression model), and the\n#   \"Residual deviance\" (the lack of fit for the model you've just\n#   fitted, analagous to the residual sum of squares). The residual\n#   deviance is much lower than the null deviance, suggesting that the\n#   model has \"explained\" a lot of the variation - just as you would say\n#   that a linear regression model explains a lot of the variation if\n#   the residual sum of squares is much lower than the total sum of\n#   squares.\n#\n#   Finally, notice the AIC. This is another measure of \"model fit\",\n#   as explained in the workshop notes. \n#\n#   Next step: produce some residual plots. The point of these is to\n#   show you that you can interpret them in exactly the same way as the\n#   residual plots from a linear regression model. The residuals here\n#   are *deviance* residuals though, not raw residuals (see the workshop\n#   notes for an explanation). The residuals are scaled in such a way\n#   that if the model is correct, most of them should lie between -2 and\n#   +2.\n#\ndev.off(); x11(width=8,height=6)\npar(mfrow=c(2,2),lwd=2,mar=c(3,3,2,2),mgp=c(2,0.75,0))\nplot(galapagos.glm1,which=1:4)\n#\n#   The Cook's distance plot shows that there are some islands which \n#   *do* potentially have a big influence on the results; and there are\n#   also several residuals outside the range -2 to 2 (look at the \n#   \"residuals vs fitted\" plot). We'll come back to that later. \n#\n#   To help understand the model that you've just fitted, let's \n#   pretend that all the assumptions are satisfied so that it makes\n#   sense to plot the fitted relationship - together with some\n#   confidence intervals, perhaps. Here goes:\n#\nx.grid <- seq(min(galapagos.data$Area),         # Fine grid of \"x\" values\n              max(galapagos.data$Area),by=0.1)\nEndemics.pred <- predict(galapagos.glm1,        # Here's the prediction\n                         newdata=data.frame(Area=x.grid),\n                         se.fit=TRUE)\n#\n#   For GLMs, the predict() command produces a list containing \n#   components \"fit\" and \"se.fit\". These are on the scale of the \n#   *linear predictor* and must be back-transformed to get\n#   back to the scale of the response variable itself. In this\n#   case, the linear predictor is the log of the mean so we \n#   just use exp() to get back to the original scale. Note\n#   also that we must calculate the CI for the linear predictor\n#   manually, because R doesn't do it for us in the case of\n#   GLMs. Since the Poisson distribution doesn't have a \n#   dispersion parameter, the appropriate formula is \n#   estimate +/- (z * std err) where z is the upper 2.5% point \n#   of a standard normal distribution. Here's how it's done:\n#\nz <- qnorm(0.975,mean=0,sd=1,lower.tail=TRUE)           # That's the z-value\nUL95 <- Endemics.pred$fit + (z*Endemics.pred$se.fit)    # Upper and lower CI limits\nLL95 <- Endemics.pred$fit - (z*Endemics.pred$se.fit)    # for linear predictor\npar(mfrow=c(1,1))\nplot(galapagos.data$Area,galapagos.data$Endemics,col=\"lightblue\",\n     pch=15,log=\"x\",xlab=expression(\"Island area (km\"^2*\")\"),ylab=\"# endemics\",\n     main=\"Galapagos islands: numbers of endemic species\")\nlines(x.grid,exp(Endemics.pred$fit),col=\"blue\")\nlines(x.grid,exp(UL95),lty=2,col=\"blue\")\nlines(x.grid,exp(LL95),lty=2,col=\"blue\")\n#\n#   Next command shows how to define a legend with both points \n#   and lines. Try it first to see what it does, and *then* \n#   look at the code to figure out how it works. \n#\nlegend(\"topleft\",col=c(\"lightblue\",\"blue\",\"blue\"),\n       pch=c(15,NA,NA),lty=c(NA,1,2),\n       legend=c(\"Observations\",\"Fitted relationship\",\"95% CI\"))\n#\n#   Does the fit look reasonable? Remember that it's a *confidence*\n#   interval, not a prediction interval - so you don't expect the\n#   observations to fall between the lines. \n#\n#   <<<<<<<<<<<<<<<<<<<<<< OPTIONAL SECTION <<<<<<<<<<<<<<<<<<<<<<<\n#   You haven't seen any graphics tricks for a while so here is \n#   another way of showing the confidence interval, as a transparent\n#   coloured band. Some of the code here is a bit messy, and it is \n#   provided solely for those students who are particularly interested\n#   in these things. If you are *not* particularly interested then\n#   you can omit this part, and go to \"END OF OPTIONAL SECTION\"\n#   below.\n#\nplot(galapagos.data$Area,galapagos.data$Endemics,col=\"blue\",\n     pch=15,log=\"x\",xlab=expression(\"Island area (km\"^2*\")\"),ylab=\"# endemics\",\n     main=\"Galapagos islands: numbers of endemic species\")\n#\n#   Defining transparent colours is hard. The col2rgb() command\n#   takes a named colour (\"lightblue\" here) and converts it into\n#   its red, green and blue components. The rgb() command then \n#   takes these components and adds an \"alpha\" value controlling \n#   the transparency: if alpha=0 then the colour is fully transparent \n#   (so you can't see it!) and if alpha=1 then the colour is fully \n#   opaque (so you can't see anything behind it). The slightly \n#   annoying thing here is that col2rgb() returns the red, green \n#   and blue components as values between 0 and 255, in a matrix \n#   with one column; but rgb() wants the components as values between\n#   0 and 1, in a matrix with one *row*(!). Hence the t() (to transpose\n#   the matrix) and the division by 255.\n#\nband.color <- rgb(t(col2rgb(\"lightblue\")/255), alpha=0.4)\npolygon(c(x.grid,rev(x.grid)), c(exp(UL95),rev(exp(LL95))),\n        border=NA,col=band.color)\nlines(x.grid,exp(Endemics.pred$fit),col=\"darkblue\")\nlegend(\"topleft\",col=c(\"blue\",\"darkblue\",NA),\n       pch=c(15,NA,NA),lty=c(NA,1,NA),\n       fill=c(NA,NA,band.color),border=c(NA,NA,NA),\n       legend=c(\"Observations\",\"Fitted relationship\",\"95% CI\"))\n#   >>>>>>>>>>>>>>>>>>> END OF OPTIONAL SECTION >>>>>>>>>>>>>>>>>>>>\n#\n#   Now let's get back to the model itself. The earlier residual\n#   plots showed several residuals outside the range (-2,2). \n#   This suggests that the endemic species counts are more\n#   variable than we would expect from a Poisson distribution.\n#   This phenomenon is called *overdispersion*. One possible\n#   explanation is that there are other factors in addition \n#   to island area that influence the number of endemic \n#   species. This is quite likely, in fact. The next question is:\n#   what might those other factors be? And do we have the data?!\n#   In Workshop 1, the variables in the dataset were described\n#   in detail (look at the script \"Workshop1_Galapagos.r\"\n#   if you want to refresh your memory). But these other \n#   variables include \"Nearest\" (distance to the nearest other\n#   island in km) and \"Adjacent\" (the area of the nearest other\n#   island in km^2). It seems reasonable to imagine that if\n#   the nearest other island is very close by, then it is\n#   easy for species to move between islands and therefore \n#   that the number of endemics is likely to be lower. Let's \n#   see whether there's any evidence for that. Notice that\n#   the update() command works for GLMs, exactly in the same\n#   way as for linear models.\n#\ngalapagos.glm2 <- update(galapagos.glm1, . ~ . + Nearest)\nsummary(galapagos.glm2)\n#\n#   The \"Nearest\" coefficient is just not quite significant\n#   at the 5% level, according to a z test. What about a \n#   chi-squared test for comparing nested models?\n#\nanova(galapagos.glm1, galapagos.glm2, test=\"Chi\")\n#\n#   Interesting ... the chi-squared test result suggests\n#   that we *can* reject the null hypothesis at the 5% \n#   level! Actually, the anova() results are usually \n#   more accurate than the z tests in the summary() \n#   output - however, in this particular instance \n#   everything seems too close to call. \n#\n#   Another way to choose between the two models is to\n#   use AIC. Which of the models does this favour?\n#   (you already have the AIC values from the model\n#   summaries).\n#\n#   It is also possible that the number of endemics \n#   is influenced by the *size* of the neighbouring\n#   island - but this probably won't make much \n#   difference if that island is 200km away! This\n#   suggests adding the variable \"Adjacent\" to \n#   the model, *as well as* an interaction between\n#   \"Adjacent\" and \"Nearest\". \n#\ngalapagos.glm3 <- \n  update(galapagos.glm2, . ~ . + Adjacent + Adjacent:Nearest)\nsummary(galapagos.glm3)\nanova(galapagos.glm2,galapagos.glm3,test=\"Chi\")\n#\n#   What do you think? Do the AIC values agree with the z tests\n#   and anova() output? Does there seem to be any evidence\n#   for an interaction between \"Adjacent\" and \"Nearest\"? \n#\n#   Regardless of what you think about these things: the \n#   reason for doing all that was to try and explain some \n#   of the additional variability in the endemic species\n#   counts. To see whether we've been successful, let's\n#   look at the residual plots for this latest model:\n#\npar(mfrow=c(2,2),lwd=2,mar=c(3,3,2,2),mgp=c(2,0.75,0))\nplot(galapagos.glm3,which=1:4)\n#\n#   Well ... there are still several residuals outside\n#   the range (-2,2). As a check on this, let's calculate\n#   the variance of the Pearson residuals - which, for a \n#   Poisson model, are defined in such a way that if the \n#   model is correct their mean and variance should be \n#   roughly 0 and 1 respectively (see workshop notes).\n#   When calculating their variance, we need to account\n#   for the number of parameters estimated in the model\n#   - so we can't just use the var() command directly.\n#\nsum( resid(galapagos.glm3,type=\"pearson\")^2 ) / galapagos.glm3$df.residual\n#\n#   That's not even close to 1! Conclusion: we haven't succeeded\n#   in explaining the excess variation. This means that all of \n#   the existing test results, confidence intervals and so forth\n#   will be incorrect because they are calculated under the \n#   assumption that the variance is equal to the mean. There isn't\n#   much that we can do to improve the model further, but there\n#   *is* a trick that we can use to at least ensure that the \n#   test results are correct. This is to introduce a \"dummy\"\n#   dispersion parameter into the Poisson model, which just\n#   allows all of the standard errors to be increased to \n#   acknowledge the additional variability in the data. R\n#   allows this via the use of a \"quasipoisson\" family of \n#   distributions (there is also a \"quasibinomial\" family, \n#   that can be used for overdispersed binomial data). Be\n#   aware that there is no such thing in reality as a \n#   \"quasiPoisson\" or \"quasibinomial\" distribution: they \n#   are provided here *solely* because it is quite common to \n#   encounter overdispersion in applications, and the \n#   inclusion of a \"dummy\" dispersion parameter provides an\n#   easy (and legitimate!) way to ensure that standard errors\n#   etc. are correct. Here we go:\n#\ngalapagos.glm4 <- update(galapagos.glm3, family=quasipoisson(link=\"log\"))\nsummary(galapagos.glm4)\n#\n#   Compare the coefficient estimates with those from galapagos.glm3.\n#   What do you notice? What about the standard errors, and the \n#   significance of the individual terms in the model as indicated\n#   by the p values in the summary table? Notice also that there is \n#   a dispersion parameter now. Where have you seen this value before? \n#   And, finally, notice that the AIC is reported as \"NA\". This \n#   is because the AIC requires a log-likelihood, and the log-likelihood\n#   is computed from the probability density or probability mass \n#   function of the fitted model, and there is no such thing as\n#   \"the probability mass function of a quasiPoisson distribution\". \n#   You might reasonably ask \"how can you estimate the parameters\n#   by maximum likelihood then?\" The answer - at least, for the \n#   purposes of this course - is: the parameters are estimated\n#   *as though* the data follow a Poisson distribution, and then \n#   the \"dummy\" dispersion parameter is introduced afterwards.\n#\n#   We can't use the anova() command to compare the quasipoisson\n#   model with any of the earlier models: it can only be used to\n#   compare nested models within the same distributional \"family\".\n#   However, if you call anova() with just a single model then \n#   it carries out a sequence of tests as though you built up \n#   the model in stages, at each stage adding one extra term.\n#   Like this (notice the use of test=\"F\", because we now have\n#   a dispersion parameter)\n#\nanova(galapagos.glm4,test=\"F\")\n#\n#   The \"official\" analysis stops here. You can continue developing\n#   the model if you like - the anova() results above certainly\n#   suggest some promising directions for improvement. But it's\n#   probably best that you tackle some of the other exercises in \n#   this week's workshop first - then you can come back to this. \n#",
    "created" : 1510534464881.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1212453382",
    "id" : "A938E95A",
    "lastKnownWriteTime" : 1490220628,
    "last_content_update" : 1490220628,
    "path" : "E:/UCL_Study/STAT7001/Rstudio/Galapagos_GLMs.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}